// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: etcdserver.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_etcdserver_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_etcdserver_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_etcdserver_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_etcdserver_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_etcdserver_2eproto;
namespace etcdserverpb {
class Metadata;
struct MetadataDefaultTypeInternal;
extern MetadataDefaultTypeInternal _Metadata_default_instance_;
class Request;
struct RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
}  // namespace etcdserverpb
PROTOBUF_NAMESPACE_OPEN
template <>
::etcdserverpb::Metadata* Arena::CreateMaybeMessage<::etcdserverpb::Metadata>(Arena*);
template <>
::etcdserverpb::Request* Arena::CreateMaybeMessage<::etcdserverpb::Request>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace etcdserverpb {

// ===================================================================


// -------------------------------------------------------------------

class Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:etcdserverpb.Request) */ {
 public:
  inline Request() : Request(nullptr) {}
  ~Request() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Request(const Request& from);
  Request(Request&& from) noexcept
    : Request() {
    *this = ::std::move(from);
  }

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request& operator=(Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Request& a, Request& b) {
    a.Swap(&b);
  }
  inline void Swap(Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Request* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Request& from) {
    Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "etcdserverpb.Request";
  }
  protected:
  explicit Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMethodFieldNumber = 2,
    kPathFieldNumber = 3,
    kValFieldNumber = 4,
    kPrevValueFieldNumber = 6,
    kIDFieldNumber = 1,
    kPrevIndexFieldNumber = 7,
    kExpirationFieldNumber = 9,
    kSinceFieldNumber = 11,
    kDirFieldNumber = 5,
    kPrevExistFieldNumber = 8,
    kWaitFieldNumber = 10,
    kRecursiveFieldNumber = 12,
    kSortedFieldNumber = 13,
    kQuorumFieldNumber = 14,
    kStreamFieldNumber = 16,
    kRefreshFieldNumber = 17,
    kTimeFieldNumber = 15,
  };
  // optional string Method = 2;
  bool has_method() const;
  void clear_method() ;
  const std::string& method() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_method(Arg_&& arg, Args_... args);
  std::string* mutable_method();
  PROTOBUF_NODISCARD std::string* release_method();
  void set_allocated_method(std::string* ptr);

  private:
  const std::string& _internal_method() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_method(
      const std::string& value);
  std::string* _internal_mutable_method();

  public:
  // optional string Path = 3;
  bool has_path() const;
  void clear_path() ;
  const std::string& path() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_path(Arg_&& arg, Args_... args);
  std::string* mutable_path();
  PROTOBUF_NODISCARD std::string* release_path();
  void set_allocated_path(std::string* ptr);

  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(
      const std::string& value);
  std::string* _internal_mutable_path();

  public:
  // optional string Val = 4;
  bool has_val() const;
  void clear_val() ;
  const std::string& val() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_val(Arg_&& arg, Args_... args);
  std::string* mutable_val();
  PROTOBUF_NODISCARD std::string* release_val();
  void set_allocated_val(std::string* ptr);

  private:
  const std::string& _internal_val() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_val(
      const std::string& value);
  std::string* _internal_mutable_val();

  public:
  // optional string PrevValue = 6;
  bool has_prevvalue() const;
  void clear_prevvalue() ;
  const std::string& prevvalue() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_prevvalue(Arg_&& arg, Args_... args);
  std::string* mutable_prevvalue();
  PROTOBUF_NODISCARD std::string* release_prevvalue();
  void set_allocated_prevvalue(std::string* ptr);

  private:
  const std::string& _internal_prevvalue() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_prevvalue(
      const std::string& value);
  std::string* _internal_mutable_prevvalue();

  public:
  // optional uint64 ID = 1;
  bool has_id() const;
  void clear_id() ;
  ::uint64_t id() const;
  void set_id(::uint64_t value);

  private:
  ::uint64_t _internal_id() const;
  void _internal_set_id(::uint64_t value);

  public:
  // optional uint64 PrevIndex = 7;
  bool has_previndex() const;
  void clear_previndex() ;
  ::uint64_t previndex() const;
  void set_previndex(::uint64_t value);

  private:
  ::uint64_t _internal_previndex() const;
  void _internal_set_previndex(::uint64_t value);

  public:
  // optional int64 Expiration = 9;
  bool has_expiration() const;
  void clear_expiration() ;
  ::int64_t expiration() const;
  void set_expiration(::int64_t value);

  private:
  ::int64_t _internal_expiration() const;
  void _internal_set_expiration(::int64_t value);

  public:
  // optional uint64 Since = 11;
  bool has_since() const;
  void clear_since() ;
  ::uint64_t since() const;
  void set_since(::uint64_t value);

  private:
  ::uint64_t _internal_since() const;
  void _internal_set_since(::uint64_t value);

  public:
  // optional bool Dir = 5;
  bool has_dir() const;
  void clear_dir() ;
  bool dir() const;
  void set_dir(bool value);

  private:
  bool _internal_dir() const;
  void _internal_set_dir(bool value);

  public:
  // optional bool PrevExist = 8;
  bool has_prevexist() const;
  void clear_prevexist() ;
  bool prevexist() const;
  void set_prevexist(bool value);

  private:
  bool _internal_prevexist() const;
  void _internal_set_prevexist(bool value);

  public:
  // optional bool Wait = 10;
  bool has_wait() const;
  void clear_wait() ;
  bool wait() const;
  void set_wait(bool value);

  private:
  bool _internal_wait() const;
  void _internal_set_wait(bool value);

  public:
  // optional bool Recursive = 12;
  bool has_recursive() const;
  void clear_recursive() ;
  bool recursive() const;
  void set_recursive(bool value);

  private:
  bool _internal_recursive() const;
  void _internal_set_recursive(bool value);

  public:
  // optional bool Sorted = 13;
  bool has_sorted() const;
  void clear_sorted() ;
  bool sorted() const;
  void set_sorted(bool value);

  private:
  bool _internal_sorted() const;
  void _internal_set_sorted(bool value);

  public:
  // optional bool Quorum = 14;
  bool has_quorum() const;
  void clear_quorum() ;
  bool quorum() const;
  void set_quorum(bool value);

  private:
  bool _internal_quorum() const;
  void _internal_set_quorum(bool value);

  public:
  // optional bool Stream = 16;
  bool has_stream() const;
  void clear_stream() ;
  bool stream() const;
  void set_stream(bool value);

  private:
  bool _internal_stream() const;
  void _internal_set_stream(bool value);

  public:
  // optional bool Refresh = 17;
  bool has_refresh() const;
  void clear_refresh() ;
  bool refresh() const;
  void set_refresh(bool value);

  private:
  bool _internal_refresh() const;
  void _internal_set_refresh(bool value);

  public:
  // optional int64 Time = 15;
  bool has_time() const;
  void clear_time() ;
  ::int64_t time() const;
  void set_time(::int64_t value);

  private:
  ::int64_t _internal_time() const;
  void _internal_set_time(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:etcdserverpb.Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr method_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr val_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prevvalue_;
    ::uint64_t id_;
    ::uint64_t previndex_;
    ::int64_t expiration_;
    ::uint64_t since_;
    bool dir_;
    bool prevexist_;
    bool wait_;
    bool recursive_;
    bool sorted_;
    bool quorum_;
    bool stream_;
    bool refresh_;
    ::int64_t time_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_etcdserver_2eproto;
};// -------------------------------------------------------------------

class Metadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:etcdserverpb.Metadata) */ {
 public:
  inline Metadata() : Metadata(nullptr) {}
  ~Metadata() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Metadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Metadata(const Metadata& from);
  Metadata(Metadata&& from) noexcept
    : Metadata() {
    *this = ::std::move(from);
  }

  inline Metadata& operator=(const Metadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline Metadata& operator=(Metadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Metadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const Metadata* internal_default_instance() {
    return reinterpret_cast<const Metadata*>(
               &_Metadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Metadata& a, Metadata& b) {
    a.Swap(&b);
  }
  inline void Swap(Metadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Metadata* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Metadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Metadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Metadata& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Metadata& from) {
    Metadata::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Metadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "etcdserverpb.Metadata";
  }
  protected:
  explicit Metadata(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeIDFieldNumber = 1,
    kClusterIDFieldNumber = 2,
  };
  // optional uint64 NodeID = 1;
  bool has_nodeid() const;
  void clear_nodeid() ;
  ::uint64_t nodeid() const;
  void set_nodeid(::uint64_t value);

  private:
  ::uint64_t _internal_nodeid() const;
  void _internal_set_nodeid(::uint64_t value);

  public:
  // optional uint64 ClusterID = 2;
  bool has_clusterid() const;
  void clear_clusterid() ;
  ::uint64_t clusterid() const;
  void set_clusterid(::uint64_t value);

  private:
  ::uint64_t _internal_clusterid() const;
  void _internal_set_clusterid(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:etcdserverpb.Metadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t nodeid_;
    ::uint64_t clusterid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_etcdserver_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Request

// optional uint64 ID = 1;
inline bool Request::has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Request::clear_id() {
  _impl_.id_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint64_t Request::id() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.Request.ID)
  return _internal_id();
}
inline void Request::set_id(::uint64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.Request.ID)
}
inline ::uint64_t Request::_internal_id() const {
  return _impl_.id_;
}
inline void Request::_internal_set_id(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.id_ = value;
}

// optional string Method = 2;
inline bool Request::has_method() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Request::clear_method() {
  _impl_.method_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Request::method() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.Request.Method)
  return _internal_method();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Request::set_method(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.method_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:etcdserverpb.Request.Method)
}
inline std::string* Request::mutable_method() {
  std::string* _s = _internal_mutable_method();
  // @@protoc_insertion_point(field_mutable:etcdserverpb.Request.Method)
  return _s;
}
inline const std::string& Request::_internal_method() const {
  return _impl_.method_.Get();
}
inline void Request::_internal_set_method(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.method_.Set(value, GetArenaForAllocation());
}
inline std::string* Request::_internal_mutable_method() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.method_.Mutable( GetArenaForAllocation());
}
inline std::string* Request::release_method() {
  // @@protoc_insertion_point(field_release:etcdserverpb.Request.Method)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.method_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.method_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Request::set_allocated_method(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.method_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.method_.IsDefault()) {
          _impl_.method_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.Request.Method)
}

// optional string Path = 3;
inline bool Request::has_path() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Request::clear_path() {
  _impl_.path_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Request::path() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.Request.Path)
  return _internal_path();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Request::set_path(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.path_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:etcdserverpb.Request.Path)
}
inline std::string* Request::mutable_path() {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:etcdserverpb.Request.Path)
  return _s;
}
inline const std::string& Request::_internal_path() const {
  return _impl_.path_.Get();
}
inline void Request::_internal_set_path(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;


  _impl_.path_.Set(value, GetArenaForAllocation());
}
inline std::string* Request::_internal_mutable_path() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.path_.Mutable( GetArenaForAllocation());
}
inline std::string* Request::release_path() {
  // @@protoc_insertion_point(field_release:etcdserverpb.Request.Path)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.path_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.path_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Request::set_allocated_path(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.path_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.path_.IsDefault()) {
          _impl_.path_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.Request.Path)
}

// optional string Val = 4;
inline bool Request::has_val() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Request::clear_val() {
  _impl_.val_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Request::val() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.Request.Val)
  return _internal_val();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Request::set_val(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.val_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:etcdserverpb.Request.Val)
}
inline std::string* Request::mutable_val() {
  std::string* _s = _internal_mutable_val();
  // @@protoc_insertion_point(field_mutable:etcdserverpb.Request.Val)
  return _s;
}
inline const std::string& Request::_internal_val() const {
  return _impl_.val_.Get();
}
inline void Request::_internal_set_val(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;


  _impl_.val_.Set(value, GetArenaForAllocation());
}
inline std::string* Request::_internal_mutable_val() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.val_.Mutable( GetArenaForAllocation());
}
inline std::string* Request::release_val() {
  // @@protoc_insertion_point(field_release:etcdserverpb.Request.Val)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.val_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.val_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Request::set_allocated_val(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.val_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.val_.IsDefault()) {
          _impl_.val_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.Request.Val)
}

// optional bool Dir = 5;
inline bool Request::has_dir() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void Request::clear_dir() {
  _impl_.dir_ = false;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline bool Request::dir() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.Request.Dir)
  return _internal_dir();
}
inline void Request::set_dir(bool value) {
  _internal_set_dir(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.Request.Dir)
}
inline bool Request::_internal_dir() const {
  return _impl_.dir_;
}
inline void Request::_internal_set_dir(bool value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.dir_ = value;
}

// optional string PrevValue = 6;
inline bool Request::has_prevvalue() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Request::clear_prevvalue() {
  _impl_.prevvalue_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& Request::prevvalue() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.Request.PrevValue)
  return _internal_prevvalue();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Request::set_prevvalue(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.prevvalue_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:etcdserverpb.Request.PrevValue)
}
inline std::string* Request::mutable_prevvalue() {
  std::string* _s = _internal_mutable_prevvalue();
  // @@protoc_insertion_point(field_mutable:etcdserverpb.Request.PrevValue)
  return _s;
}
inline const std::string& Request::_internal_prevvalue() const {
  return _impl_.prevvalue_.Get();
}
inline void Request::_internal_set_prevvalue(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;


  _impl_.prevvalue_.Set(value, GetArenaForAllocation());
}
inline std::string* Request::_internal_mutable_prevvalue() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.prevvalue_.Mutable( GetArenaForAllocation());
}
inline std::string* Request::release_prevvalue() {
  // @@protoc_insertion_point(field_release:etcdserverpb.Request.PrevValue)
  if ((_impl_._has_bits_[0] & 0x00000008u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* released = _impl_.prevvalue_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.prevvalue_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Request::set_allocated_prevvalue(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.prevvalue_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.prevvalue_.IsDefault()) {
          _impl_.prevvalue_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.Request.PrevValue)
}

// optional uint64 PrevIndex = 7;
inline bool Request::has_previndex() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void Request::clear_previndex() {
  _impl_.previndex_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::uint64_t Request::previndex() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.Request.PrevIndex)
  return _internal_previndex();
}
inline void Request::set_previndex(::uint64_t value) {
  _internal_set_previndex(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.Request.PrevIndex)
}
inline ::uint64_t Request::_internal_previndex() const {
  return _impl_.previndex_;
}
inline void Request::_internal_set_previndex(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.previndex_ = value;
}

// optional bool PrevExist = 8;
inline bool Request::has_prevexist() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void Request::clear_prevexist() {
  _impl_.prevexist_ = false;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline bool Request::prevexist() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.Request.PrevExist)
  return _internal_prevexist();
}
inline void Request::set_prevexist(bool value) {
  _internal_set_prevexist(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.Request.PrevExist)
}
inline bool Request::_internal_prevexist() const {
  return _impl_.prevexist_;
}
inline void Request::_internal_set_prevexist(bool value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.prevexist_ = value;
}

// optional int64 Expiration = 9;
inline bool Request::has_expiration() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void Request::clear_expiration() {
  _impl_.expiration_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::int64_t Request::expiration() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.Request.Expiration)
  return _internal_expiration();
}
inline void Request::set_expiration(::int64_t value) {
  _internal_set_expiration(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.Request.Expiration)
}
inline ::int64_t Request::_internal_expiration() const {
  return _impl_.expiration_;
}
inline void Request::_internal_set_expiration(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.expiration_ = value;
}

// optional bool Wait = 10;
inline bool Request::has_wait() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline void Request::clear_wait() {
  _impl_.wait_ = false;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline bool Request::wait() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.Request.Wait)
  return _internal_wait();
}
inline void Request::set_wait(bool value) {
  _internal_set_wait(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.Request.Wait)
}
inline bool Request::_internal_wait() const {
  return _impl_.wait_;
}
inline void Request::_internal_set_wait(bool value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.wait_ = value;
}

// optional uint64 Since = 11;
inline bool Request::has_since() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void Request::clear_since() {
  _impl_.since_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::uint64_t Request::since() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.Request.Since)
  return _internal_since();
}
inline void Request::set_since(::uint64_t value) {
  _internal_set_since(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.Request.Since)
}
inline ::uint64_t Request::_internal_since() const {
  return _impl_.since_;
}
inline void Request::_internal_set_since(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.since_ = value;
}

// optional bool Recursive = 12;
inline bool Request::has_recursive() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline void Request::clear_recursive() {
  _impl_.recursive_ = false;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline bool Request::recursive() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.Request.Recursive)
  return _internal_recursive();
}
inline void Request::set_recursive(bool value) {
  _internal_set_recursive(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.Request.Recursive)
}
inline bool Request::_internal_recursive() const {
  return _impl_.recursive_;
}
inline void Request::_internal_set_recursive(bool value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.recursive_ = value;
}

// optional bool Sorted = 13;
inline bool Request::has_sorted() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline void Request::clear_sorted() {
  _impl_.sorted_ = false;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline bool Request::sorted() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.Request.Sorted)
  return _internal_sorted();
}
inline void Request::set_sorted(bool value) {
  _internal_set_sorted(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.Request.Sorted)
}
inline bool Request::_internal_sorted() const {
  return _impl_.sorted_;
}
inline void Request::_internal_set_sorted(bool value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.sorted_ = value;
}

// optional bool Quorum = 14;
inline bool Request::has_quorum() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline void Request::clear_quorum() {
  _impl_.quorum_ = false;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline bool Request::quorum() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.Request.Quorum)
  return _internal_quorum();
}
inline void Request::set_quorum(bool value) {
  _internal_set_quorum(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.Request.Quorum)
}
inline bool Request::_internal_quorum() const {
  return _impl_.quorum_;
}
inline void Request::_internal_set_quorum(bool value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.quorum_ = value;
}

// optional int64 Time = 15;
inline bool Request::has_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline void Request::clear_time() {
  _impl_.time_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline ::int64_t Request::time() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.Request.Time)
  return _internal_time();
}
inline void Request::set_time(::int64_t value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.Request.Time)
}
inline ::int64_t Request::_internal_time() const {
  return _impl_.time_;
}
inline void Request::_internal_set_time(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00010000u;
  _impl_.time_ = value;
}

// optional bool Stream = 16;
inline bool Request::has_stream() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline void Request::clear_stream() {
  _impl_.stream_ = false;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline bool Request::stream() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.Request.Stream)
  return _internal_stream();
}
inline void Request::set_stream(bool value) {
  _internal_set_stream(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.Request.Stream)
}
inline bool Request::_internal_stream() const {
  return _impl_.stream_;
}
inline void Request::_internal_set_stream(bool value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.stream_ = value;
}

// optional bool Refresh = 17;
inline bool Request::has_refresh() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline void Request::clear_refresh() {
  _impl_.refresh_ = false;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline bool Request::refresh() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.Request.Refresh)
  return _internal_refresh();
}
inline void Request::set_refresh(bool value) {
  _internal_set_refresh(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.Request.Refresh)
}
inline bool Request::_internal_refresh() const {
  return _impl_.refresh_;
}
inline void Request::_internal_set_refresh(bool value) {
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.refresh_ = value;
}

// -------------------------------------------------------------------

// Metadata

// optional uint64 NodeID = 1;
inline bool Metadata::has_nodeid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Metadata::clear_nodeid() {
  _impl_.nodeid_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t Metadata::nodeid() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.Metadata.NodeID)
  return _internal_nodeid();
}
inline void Metadata::set_nodeid(::uint64_t value) {
  _internal_set_nodeid(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.Metadata.NodeID)
}
inline ::uint64_t Metadata::_internal_nodeid() const {
  return _impl_.nodeid_;
}
inline void Metadata::_internal_set_nodeid(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.nodeid_ = value;
}

// optional uint64 ClusterID = 2;
inline bool Metadata::has_clusterid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Metadata::clear_clusterid() {
  _impl_.clusterid_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t Metadata::clusterid() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.Metadata.ClusterID)
  return _internal_clusterid();
}
inline void Metadata::set_clusterid(::uint64_t value) {
  _internal_set_clusterid(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.Metadata.ClusterID)
}
inline ::uint64_t Metadata::_internal_clusterid() const {
  return _impl_.clusterid_;
}
inline void Metadata::_internal_set_clusterid(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.clusterid_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace etcdserverpb


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_etcdserver_2eproto_2epb_2eh
