// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: etcdserver.proto

#include "etcdserver.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace etcdserverpb {
template <typename>
PROTOBUF_CONSTEXPR Request::Request(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.method_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.path_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.val_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.prevvalue_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.id_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.previndex_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.expiration_)*/ ::int64_t{0}

  , /*decltype(_impl_.since_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.dir_)*/ false

  , /*decltype(_impl_.prevexist_)*/ false

  , /*decltype(_impl_.wait_)*/ false

  , /*decltype(_impl_.recursive_)*/ false

  , /*decltype(_impl_.sorted_)*/ false

  , /*decltype(_impl_.quorum_)*/ false

  , /*decltype(_impl_.stream_)*/ false

  , /*decltype(_impl_.refresh_)*/ false

  , /*decltype(_impl_.time_)*/ ::int64_t{0}
} {}
struct RequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RequestDefaultTypeInternal() {}
  union {
    Request _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RequestDefaultTypeInternal _Request_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Metadata::Metadata(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.nodeid_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.clusterid_)*/ ::uint64_t{0u}
} {}
struct MetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MetadataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MetadataDefaultTypeInternal() {}
  union {
    Metadata _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MetadataDefaultTypeInternal _Metadata_default_instance_;
}  // namespace etcdserverpb
static ::_pb::Metadata file_level_metadata_etcdserver_2eproto[2];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_etcdserver_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_etcdserver_2eproto = nullptr;
const ::uint32_t TableStruct_etcdserver_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::etcdserverpb::Request, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::etcdserverpb::Request, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::etcdserverpb::Request, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::etcdserverpb::Request, _impl_.method_),
    PROTOBUF_FIELD_OFFSET(::etcdserverpb::Request, _impl_.path_),
    PROTOBUF_FIELD_OFFSET(::etcdserverpb::Request, _impl_.val_),
    PROTOBUF_FIELD_OFFSET(::etcdserverpb::Request, _impl_.dir_),
    PROTOBUF_FIELD_OFFSET(::etcdserverpb::Request, _impl_.prevvalue_),
    PROTOBUF_FIELD_OFFSET(::etcdserverpb::Request, _impl_.previndex_),
    PROTOBUF_FIELD_OFFSET(::etcdserverpb::Request, _impl_.prevexist_),
    PROTOBUF_FIELD_OFFSET(::etcdserverpb::Request, _impl_.expiration_),
    PROTOBUF_FIELD_OFFSET(::etcdserverpb::Request, _impl_.wait_),
    PROTOBUF_FIELD_OFFSET(::etcdserverpb::Request, _impl_.since_),
    PROTOBUF_FIELD_OFFSET(::etcdserverpb::Request, _impl_.recursive_),
    PROTOBUF_FIELD_OFFSET(::etcdserverpb::Request, _impl_.sorted_),
    PROTOBUF_FIELD_OFFSET(::etcdserverpb::Request, _impl_.quorum_),
    PROTOBUF_FIELD_OFFSET(::etcdserverpb::Request, _impl_.time_),
    PROTOBUF_FIELD_OFFSET(::etcdserverpb::Request, _impl_.stream_),
    PROTOBUF_FIELD_OFFSET(::etcdserverpb::Request, _impl_.refresh_),
    4,
    0,
    1,
    2,
    8,
    3,
    5,
    9,
    6,
    10,
    7,
    11,
    12,
    13,
    16,
    14,
    15,
    PROTOBUF_FIELD_OFFSET(::etcdserverpb::Metadata, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::etcdserverpb::Metadata, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::etcdserverpb::Metadata, _impl_.nodeid_),
    PROTOBUF_FIELD_OFFSET(::etcdserverpb::Metadata, _impl_.clusterid_),
    0,
    1,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 25, -1, sizeof(::etcdserverpb::Request)},
        { 42, 52, -1, sizeof(::etcdserverpb::Metadata)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::etcdserverpb::_Request_default_instance_._instance,
    &::etcdserverpb::_Metadata_default_instance_._instance,
};
const char descriptor_table_protodef_etcdserver_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\020etcdserver.proto\022\014etcdserverpb\"\231\002\n\007Req"
    "uest\022\n\n\002ID\030\001 \001(\004\022\016\n\006Method\030\002 \001(\t\022\014\n\004Path"
    "\030\003 \001(\t\022\013\n\003Val\030\004 \001(\t\022\013\n\003Dir\030\005 \001(\010\022\021\n\tPrev"
    "Value\030\006 \001(\t\022\021\n\tPrevIndex\030\007 \001(\004\022\021\n\tPrevEx"
    "ist\030\010 \001(\010\022\022\n\nExpiration\030\t \001(\003\022\014\n\004Wait\030\n "
    "\001(\010\022\r\n\005Since\030\013 \001(\004\022\021\n\tRecursive\030\014 \001(\010\022\016\n"
    "\006Sorted\030\r \001(\010\022\016\n\006Quorum\030\016 \001(\010\022\014\n\004Time\030\017 "
    "\001(\003\022\016\n\006Stream\030\020 \001(\010\022\017\n\007Refresh\030\021 \001(\010\"-\n\010"
    "Metadata\022\016\n\006NodeID\030\001 \001(\004\022\021\n\tClusterID\030\002 "
    "\001(\004"
};
static ::absl::once_flag descriptor_table_etcdserver_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_etcdserver_2eproto = {
    false,
    false,
    363,
    descriptor_table_protodef_etcdserver_2eproto,
    "etcdserver.proto",
    &descriptor_table_etcdserver_2eproto_once,
    nullptr,
    0,
    2,
    schemas,
    file_default_instances,
    TableStruct_etcdserver_2eproto::offsets,
    file_level_metadata_etcdserver_2eproto,
    file_level_enum_descriptors_etcdserver_2eproto,
    file_level_service_descriptors_etcdserver_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_etcdserver_2eproto_getter() {
  return &descriptor_table_etcdserver_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_etcdserver_2eproto(&descriptor_table_etcdserver_2eproto);
namespace etcdserverpb {
// ===================================================================

class Request::_Internal {
 public:
  using HasBits = decltype(std::declval<Request>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Request, _impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_method(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_path(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_val(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_dir(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_prevvalue(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_previndex(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_prevexist(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_expiration(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_wait(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_since(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_recursive(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_sorted(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_quorum(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_time(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_stream(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_refresh(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
};

Request::Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:etcdserverpb.Request)
}
Request::Request(const Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Request* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.method_) {}

    , decltype(_impl_.path_) {}

    , decltype(_impl_.val_) {}

    , decltype(_impl_.prevvalue_) {}

    , decltype(_impl_.id_) {}

    , decltype(_impl_.previndex_) {}

    , decltype(_impl_.expiration_) {}

    , decltype(_impl_.since_) {}

    , decltype(_impl_.dir_) {}

    , decltype(_impl_.prevexist_) {}

    , decltype(_impl_.wait_) {}

    , decltype(_impl_.recursive_) {}

    , decltype(_impl_.sorted_) {}

    , decltype(_impl_.quorum_) {}

    , decltype(_impl_.stream_) {}

    , decltype(_impl_.refresh_) {}

    , decltype(_impl_.time_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.method_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.method_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.method_.Set(from._internal_method(), _this->GetArenaForAllocation());
  }
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.path_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.path_.Set(from._internal_path(), _this->GetArenaForAllocation());
  }
  _impl_.val_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.val_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.val_.Set(from._internal_val(), _this->GetArenaForAllocation());
  }
  _impl_.prevvalue_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.prevvalue_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000008u) != 0) {
    _this->_impl_.prevvalue_.Set(from._internal_prevvalue(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.time_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.time_));
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.Request)
}

inline void Request::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.method_) {}

    , decltype(_impl_.path_) {}

    , decltype(_impl_.val_) {}

    , decltype(_impl_.prevvalue_) {}

    , decltype(_impl_.id_) { ::uint64_t{0u} }

    , decltype(_impl_.previndex_) { ::uint64_t{0u} }

    , decltype(_impl_.expiration_) { ::int64_t{0} }

    , decltype(_impl_.since_) { ::uint64_t{0u} }

    , decltype(_impl_.dir_) { false }

    , decltype(_impl_.prevexist_) { false }

    , decltype(_impl_.wait_) { false }

    , decltype(_impl_.recursive_) { false }

    , decltype(_impl_.sorted_) { false }

    , decltype(_impl_.quorum_) { false }

    , decltype(_impl_.stream_) { false }

    , decltype(_impl_.refresh_) { false }

    , decltype(_impl_.time_) { ::int64_t{0} }

  };
  _impl_.method_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.method_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.path_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.val_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.val_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.prevvalue_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.prevvalue_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Request::~Request() {
  // @@protoc_insertion_point(destructor:etcdserverpb.Request)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Request::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.method_.Destroy();
  _impl_.path_.Destroy();
  _impl_.val_.Destroy();
  _impl_.prevvalue_.Destroy();
}

void Request::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Request::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.Request)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.method_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.path_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.val_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.prevvalue_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&_impl_.id_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.since_) -
        reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.since_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.dir_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.refresh_) -
        reinterpret_cast<char*>(&_impl_.dir_)) + sizeof(_impl_.refresh_));
  }
  _impl_.time_ = ::int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Request::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 ID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string Method = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_method();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "etcdserverpb.Request.Method");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string Path = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "etcdserverpb.Request.Path");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string Val = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_val();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "etcdserverpb.Request.Val");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool Dir = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _Internal::set_has_dir(&has_bits);
          _impl_.dir_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string PrevValue = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_prevvalue();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "etcdserverpb.Request.PrevValue");
          #endif  // !NDEBUG
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 PrevIndex = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          _Internal::set_has_previndex(&has_bits);
          _impl_.previndex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool PrevExist = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 64)) {
          _Internal::set_has_prevexist(&has_bits);
          _impl_.prevexist_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 Expiration = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 72)) {
          _Internal::set_has_expiration(&has_bits);
          _impl_.expiration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool Wait = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 80)) {
          _Internal::set_has_wait(&has_bits);
          _impl_.wait_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 Since = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 88)) {
          _Internal::set_has_since(&has_bits);
          _impl_.since_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool Recursive = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 96)) {
          _Internal::set_has_recursive(&has_bits);
          _impl_.recursive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool Sorted = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 104)) {
          _Internal::set_has_sorted(&has_bits);
          _impl_.sorted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool Quorum = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 112)) {
          _Internal::set_has_quorum(&has_bits);
          _impl_.quorum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 Time = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 120)) {
          _Internal::set_has_time(&has_bits);
          _impl_.time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool Stream = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 128)) {
          _Internal::set_has_stream(&has_bits);
          _impl_.stream_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool Refresh = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 136)) {
          _Internal::set_has_refresh(&has_bits);
          _impl_.refresh_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Request::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.Request)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 ID = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_id(), target);
  }

  // optional string Method = 2;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_method();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "etcdserverpb.Request.Method");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // optional string Path = 3;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_path();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "etcdserverpb.Request.Path");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // optional string Val = 4;
  if (cached_has_bits & 0x00000004u) {
    const std::string& _s = this->_internal_val();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "etcdserverpb.Request.Val");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // optional bool Dir = 5;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        5, this->_internal_dir(), target);
  }

  // optional string PrevValue = 6;
  if (cached_has_bits & 0x00000008u) {
    const std::string& _s = this->_internal_prevvalue();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
                                "etcdserverpb.Request.PrevValue");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  // optional uint64 PrevIndex = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        7, this->_internal_previndex(), target);
  }

  // optional bool PrevExist = 8;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        8, this->_internal_prevexist(), target);
  }

  // optional int64 Expiration = 9;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        9, this->_internal_expiration(), target);
  }

  // optional bool Wait = 10;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        10, this->_internal_wait(), target);
  }

  // optional uint64 Since = 11;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        11, this->_internal_since(), target);
  }

  // optional bool Recursive = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        12, this->_internal_recursive(), target);
  }

  // optional bool Sorted = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        13, this->_internal_sorted(), target);
  }

  // optional bool Quorum = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        14, this->_internal_quorum(), target);
  }

  // optional int64 Time = 15;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        15, this->_internal_time(), target);
  }

  // optional bool Stream = 16;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        16, this->_internal_stream(), target);
  }

  // optional bool Refresh = 17;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        17, this->_internal_refresh(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.Request)
  return target;
}

::size_t Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.Request)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string Method = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_method());
    }

    // optional string Path = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_path());
    }

    // optional string Val = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_val());
    }

    // optional string PrevValue = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_prevvalue());
    }

    // optional uint64 ID = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_id());
    }

    // optional uint64 PrevIndex = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_previndex());
    }

    // optional int64 Expiration = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_expiration());
    }

    // optional uint64 Since = 11;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_since());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool Dir = 5;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2;
    }

    // optional bool PrevExist = 8;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2;
    }

    // optional bool Wait = 10;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2;
    }

    // optional bool Recursive = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2;
    }

    // optional bool Sorted = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2;
    }

    // optional bool Quorum = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2;
    }

    // optional bool Stream = 16;
    if (cached_has_bits & 0x00004000u) {
      total_size += 3;
    }

    // optional bool Refresh = 17;
    if (cached_has_bits & 0x00008000u) {
      total_size += 3;
    }

  }
  // optional int64 Time = 15;
  if (cached_has_bits & 0x00010000u) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_time());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Request::GetClassData() const { return &_class_data_; }


void Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Request*>(&to_msg);
  auto& from = static_cast<const Request&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.Request)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_method(from._internal_method());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_path(from._internal_path());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_val(from._internal_val());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_prevvalue(from._internal_prevvalue());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.id_ = from._impl_.id_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.previndex_ = from._impl_.previndex_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.expiration_ = from._impl_.expiration_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.since_ = from._impl_.since_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.dir_ = from._impl_.dir_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.prevexist_ = from._impl_.prevexist_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.wait_ = from._impl_.wait_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.recursive_ = from._impl_.recursive_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.sorted_ = from._impl_.sorted_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.quorum_ = from._impl_.quorum_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.stream_ = from._impl_.stream_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.refresh_ = from._impl_.refresh_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00010000u) {
    _this->_internal_set_time(from._internal_time());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Request::CopyFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {
  return true;
}

void Request::InternalSwap(Request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.method_, lhs_arena,
                                       &other->_impl_.method_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.path_, lhs_arena,
                                       &other->_impl_.path_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.val_, lhs_arena,
                                       &other->_impl_.val_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.prevvalue_, lhs_arena,
                                       &other->_impl_.prevvalue_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Request, _impl_.time_)
      + sizeof(Request::_impl_.time_)
      - PROTOBUF_FIELD_OFFSET(Request, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Request::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_etcdserver_2eproto_getter, &descriptor_table_etcdserver_2eproto_once,
      file_level_metadata_etcdserver_2eproto[0]);
}
// ===================================================================

class Metadata::_Internal {
 public:
  using HasBits = decltype(std::declval<Metadata>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Metadata, _impl_._has_bits_);
  static void set_has_nodeid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_clusterid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Metadata::Metadata(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:etcdserverpb.Metadata)
}
Metadata::Metadata(const Metadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.Metadata)
}

inline void Metadata::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.nodeid_) { ::uint64_t{0u} }

    , decltype(_impl_.clusterid_) { ::uint64_t{0u} }

  };
}

Metadata::~Metadata() {
  // @@protoc_insertion_point(destructor:etcdserverpb.Metadata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Metadata::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void Metadata::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Metadata::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.Metadata)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.nodeid_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.clusterid_) -
        reinterpret_cast<char*>(&_impl_.nodeid_)) + sizeof(_impl_.clusterid_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Metadata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 NodeID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_nodeid(&has_bits);
          _impl_.nodeid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 ClusterID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_clusterid(&has_bits);
          _impl_.clusterid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Metadata::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.Metadata)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 NodeID = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_nodeid(), target);
  }

  // optional uint64 ClusterID = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_clusterid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.Metadata)
  return target;
}

::size_t Metadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.Metadata)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 NodeID = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_nodeid());
    }

    // optional uint64 ClusterID = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_clusterid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Metadata::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Metadata::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Metadata::GetClassData() const { return &_class_data_; }


void Metadata::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Metadata*>(&to_msg);
  auto& from = static_cast<const Metadata&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.Metadata)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.nodeid_ = from._impl_.nodeid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.clusterid_ = from._impl_.clusterid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Metadata::CopyFrom(const Metadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.Metadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Metadata::IsInitialized() const {
  return true;
}

void Metadata::InternalSwap(Metadata* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Metadata, _impl_.clusterid_)
      + sizeof(Metadata::_impl_.clusterid_)
      - PROTOBUF_FIELD_OFFSET(Metadata, _impl_.nodeid_)>(
          reinterpret_cast<char*>(&_impl_.nodeid_),
          reinterpret_cast<char*>(&other->_impl_.nodeid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Metadata::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_etcdserver_2eproto_getter, &descriptor_table_etcdserver_2eproto_once,
      file_level_metadata_etcdserver_2eproto[1]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace etcdserverpb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::etcdserverpb::Request*
Arena::CreateMaybeMessage< ::etcdserverpb::Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::etcdserverpb::Request >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::Metadata*
Arena::CreateMaybeMessage< ::etcdserverpb::Metadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::etcdserverpb::Metadata >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
