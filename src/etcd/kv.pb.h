// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kv.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_kv_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_kv_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_kv_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_kv_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_kv_2eproto;
namespace mvccpb {
class Event;
struct EventDefaultTypeInternal;
extern EventDefaultTypeInternal _Event_default_instance_;
class KeyValue;
struct KeyValueDefaultTypeInternal;
extern KeyValueDefaultTypeInternal _KeyValue_default_instance_;
}  // namespace mvccpb
PROTOBUF_NAMESPACE_OPEN
template <>
::mvccpb::Event* Arena::CreateMaybeMessage<::mvccpb::Event>(Arena*);
template <>
::mvccpb::KeyValue* Arena::CreateMaybeMessage<::mvccpb::KeyValue>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace mvccpb {
enum Event_EventType : int {
  Event_EventType_PUT = 0,
  Event_EventType_DELETE = 1,
  Event_EventType_Event_EventType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Event_EventType_Event_EventType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Event_EventType_IsValid(int value);
constexpr Event_EventType Event_EventType_EventType_MIN = static_cast<Event_EventType>(0);
constexpr Event_EventType Event_EventType_EventType_MAX = static_cast<Event_EventType>(1);
constexpr int Event_EventType_EventType_ARRAYSIZE = 1 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
Event_EventType_descriptor();
template <typename T>
const std::string& Event_EventType_Name(T value) {
  static_assert(std::is_same<T, Event_EventType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to EventType_Name().");
  return Event_EventType_Name(static_cast<Event_EventType>(value));
}
template <>
inline const std::string& Event_EventType_Name(Event_EventType value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<Event_EventType_descriptor,
                                                 0, 1>(
      static_cast<int>(value));
}
inline bool Event_EventType_Parse(absl::string_view name, Event_EventType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Event_EventType>(
      Event_EventType_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class KeyValue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mvccpb.KeyValue) */ {
 public:
  inline KeyValue() : KeyValue(nullptr) {}
  ~KeyValue() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR KeyValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KeyValue(const KeyValue& from);
  KeyValue(KeyValue&& from) noexcept
    : KeyValue() {
    *this = ::std::move(from);
  }

  inline KeyValue& operator=(const KeyValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeyValue& operator=(KeyValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KeyValue& default_instance() {
    return *internal_default_instance();
  }
  static inline const KeyValue* internal_default_instance() {
    return reinterpret_cast<const KeyValue*>(
               &_KeyValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(KeyValue& a, KeyValue& b) {
    a.Swap(&b);
  }
  inline void Swap(KeyValue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KeyValue* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KeyValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KeyValue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KeyValue& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const KeyValue& from) {
    KeyValue::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeyValue* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "mvccpb.KeyValue";
  }
  protected:
  explicit KeyValue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 5,
    kCreateRevisionFieldNumber = 2,
    kModRevisionFieldNumber = 3,
    kVersionFieldNumber = 4,
    kLeaseFieldNumber = 6,
  };
  // bytes key = 1;
  void clear_key() ;
  const std::string& key() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_key(Arg_&& arg, Args_... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* ptr);

  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(
      const std::string& value);
  std::string* _internal_mutable_key();

  public:
  // bytes value = 5;
  void clear_value() ;
  const std::string& value() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_value(Arg_&& arg, Args_... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* ptr);

  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(
      const std::string& value);
  std::string* _internal_mutable_value();

  public:
  // int64 create_revision = 2;
  void clear_create_revision() ;
  ::int64_t create_revision() const;
  void set_create_revision(::int64_t value);

  private:
  ::int64_t _internal_create_revision() const;
  void _internal_set_create_revision(::int64_t value);

  public:
  // int64 mod_revision = 3;
  void clear_mod_revision() ;
  ::int64_t mod_revision() const;
  void set_mod_revision(::int64_t value);

  private:
  ::int64_t _internal_mod_revision() const;
  void _internal_set_mod_revision(::int64_t value);

  public:
  // int64 version = 4;
  void clear_version() ;
  ::int64_t version() const;
  void set_version(::int64_t value);

  private:
  ::int64_t _internal_version() const;
  void _internal_set_version(::int64_t value);

  public:
  // int64 lease = 6;
  void clear_lease() ;
  ::int64_t lease() const;
  void set_lease(::int64_t value);

  private:
  ::int64_t _internal_lease() const;
  void _internal_set_lease(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:mvccpb.KeyValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
    ::int64_t create_revision_;
    ::int64_t mod_revision_;
    ::int64_t version_;
    ::int64_t lease_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_kv_2eproto;
};// -------------------------------------------------------------------

class Event final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mvccpb.Event) */ {
 public:
  inline Event() : Event(nullptr) {}
  ~Event() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Event(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Event(const Event& from);
  Event(Event&& from) noexcept
    : Event() {
    *this = ::std::move(from);
  }

  inline Event& operator=(const Event& from) {
    CopyFrom(from);
    return *this;
  }
  inline Event& operator=(Event&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Event& default_instance() {
    return *internal_default_instance();
  }
  static inline const Event* internal_default_instance() {
    return reinterpret_cast<const Event*>(
               &_Event_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Event& a, Event& b) {
    a.Swap(&b);
  }
  inline void Swap(Event* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Event* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Event* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Event>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Event& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Event& from) {
    Event::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Event* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "mvccpb.Event";
  }
  protected:
  explicit Event(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using EventType = Event_EventType;
  static constexpr EventType PUT = Event_EventType_PUT;
  static constexpr EventType DELETE = Event_EventType_DELETE;
  static inline bool EventType_IsValid(int value) {
    return Event_EventType_IsValid(value);
  }
  static constexpr EventType EventType_MIN = Event_EventType_EventType_MIN;
  static constexpr EventType EventType_MAX = Event_EventType_EventType_MAX;
  static constexpr int EventType_ARRAYSIZE = Event_EventType_EventType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EventType_descriptor() {
    return Event_EventType_descriptor();
  }
  template <typename T>
  static inline const std::string& EventType_Name(T value) {
    return Event_EventType_Name(value);
  }
  static inline bool EventType_Parse(absl::string_view name, EventType* value) {
    return Event_EventType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kKvFieldNumber = 2,
    kPrevKvFieldNumber = 3,
    kTypeFieldNumber = 1,
  };
  // .mvccpb.KeyValue kv = 2;
  bool has_kv() const;
  void clear_kv() ;
  const ::mvccpb::KeyValue& kv() const;
  PROTOBUF_NODISCARD ::mvccpb::KeyValue* release_kv();
  ::mvccpb::KeyValue* mutable_kv();
  void set_allocated_kv(::mvccpb::KeyValue* kv);
  private:
  const ::mvccpb::KeyValue& _internal_kv() const;
  ::mvccpb::KeyValue* _internal_mutable_kv();
  public:
  void unsafe_arena_set_allocated_kv(
      ::mvccpb::KeyValue* kv);
  ::mvccpb::KeyValue* unsafe_arena_release_kv();
  // .mvccpb.KeyValue prev_kv = 3;
  bool has_prev_kv() const;
  void clear_prev_kv() ;
  const ::mvccpb::KeyValue& prev_kv() const;
  PROTOBUF_NODISCARD ::mvccpb::KeyValue* release_prev_kv();
  ::mvccpb::KeyValue* mutable_prev_kv();
  void set_allocated_prev_kv(::mvccpb::KeyValue* prev_kv);
  private:
  const ::mvccpb::KeyValue& _internal_prev_kv() const;
  ::mvccpb::KeyValue* _internal_mutable_prev_kv();
  public:
  void unsafe_arena_set_allocated_prev_kv(
      ::mvccpb::KeyValue* prev_kv);
  ::mvccpb::KeyValue* unsafe_arena_release_prev_kv();
  // .mvccpb.Event.EventType type = 1;
  void clear_type() ;
  ::mvccpb::Event_EventType type() const;
  void set_type(::mvccpb::Event_EventType value);

  private:
  ::mvccpb::Event_EventType _internal_type() const;
  void _internal_set_type(::mvccpb::Event_EventType value);

  public:
  // @@protoc_insertion_point(class_scope:mvccpb.Event)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::mvccpb::KeyValue* kv_;
    ::mvccpb::KeyValue* prev_kv_;
    int type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_kv_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// KeyValue

// bytes key = 1;
inline void KeyValue::clear_key() {
  _impl_.key_.ClearToEmpty();
}
inline const std::string& KeyValue::key() const {
  // @@protoc_insertion_point(field_get:mvccpb.KeyValue.key)
  return _internal_key();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void KeyValue::set_key(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.key_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mvccpb.KeyValue.key)
}
inline std::string* KeyValue::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:mvccpb.KeyValue.key)
  return _s;
}
inline const std::string& KeyValue::_internal_key() const {
  return _impl_.key_.Get();
}
inline void KeyValue::_internal_set_key(const std::string& value) {
  ;


  _impl_.key_.Set(value, GetArenaForAllocation());
}
inline std::string* KeyValue::_internal_mutable_key() {
  ;
  return _impl_.key_.Mutable( GetArenaForAllocation());
}
inline std::string* KeyValue::release_key() {
  // @@protoc_insertion_point(field_release:mvccpb.KeyValue.key)
  return _impl_.key_.Release();
}
inline void KeyValue::set_allocated_key(std::string* value) {
  _impl_.key_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.key_.IsDefault()) {
          _impl_.key_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mvccpb.KeyValue.key)
}

// int64 create_revision = 2;
inline void KeyValue::clear_create_revision() {
  _impl_.create_revision_ = ::int64_t{0};
}
inline ::int64_t KeyValue::create_revision() const {
  // @@protoc_insertion_point(field_get:mvccpb.KeyValue.create_revision)
  return _internal_create_revision();
}
inline void KeyValue::set_create_revision(::int64_t value) {
  _internal_set_create_revision(value);
  // @@protoc_insertion_point(field_set:mvccpb.KeyValue.create_revision)
}
inline ::int64_t KeyValue::_internal_create_revision() const {
  return _impl_.create_revision_;
}
inline void KeyValue::_internal_set_create_revision(::int64_t value) {
  ;
  _impl_.create_revision_ = value;
}

// int64 mod_revision = 3;
inline void KeyValue::clear_mod_revision() {
  _impl_.mod_revision_ = ::int64_t{0};
}
inline ::int64_t KeyValue::mod_revision() const {
  // @@protoc_insertion_point(field_get:mvccpb.KeyValue.mod_revision)
  return _internal_mod_revision();
}
inline void KeyValue::set_mod_revision(::int64_t value) {
  _internal_set_mod_revision(value);
  // @@protoc_insertion_point(field_set:mvccpb.KeyValue.mod_revision)
}
inline ::int64_t KeyValue::_internal_mod_revision() const {
  return _impl_.mod_revision_;
}
inline void KeyValue::_internal_set_mod_revision(::int64_t value) {
  ;
  _impl_.mod_revision_ = value;
}

// int64 version = 4;
inline void KeyValue::clear_version() {
  _impl_.version_ = ::int64_t{0};
}
inline ::int64_t KeyValue::version() const {
  // @@protoc_insertion_point(field_get:mvccpb.KeyValue.version)
  return _internal_version();
}
inline void KeyValue::set_version(::int64_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:mvccpb.KeyValue.version)
}
inline ::int64_t KeyValue::_internal_version() const {
  return _impl_.version_;
}
inline void KeyValue::_internal_set_version(::int64_t value) {
  ;
  _impl_.version_ = value;
}

// bytes value = 5;
inline void KeyValue::clear_value() {
  _impl_.value_.ClearToEmpty();
}
inline const std::string& KeyValue::value() const {
  // @@protoc_insertion_point(field_get:mvccpb.KeyValue.value)
  return _internal_value();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void KeyValue::set_value(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.value_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mvccpb.KeyValue.value)
}
inline std::string* KeyValue::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:mvccpb.KeyValue.value)
  return _s;
}
inline const std::string& KeyValue::_internal_value() const {
  return _impl_.value_.Get();
}
inline void KeyValue::_internal_set_value(const std::string& value) {
  ;


  _impl_.value_.Set(value, GetArenaForAllocation());
}
inline std::string* KeyValue::_internal_mutable_value() {
  ;
  return _impl_.value_.Mutable( GetArenaForAllocation());
}
inline std::string* KeyValue::release_value() {
  // @@protoc_insertion_point(field_release:mvccpb.KeyValue.value)
  return _impl_.value_.Release();
}
inline void KeyValue::set_allocated_value(std::string* value) {
  _impl_.value_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.value_.IsDefault()) {
          _impl_.value_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mvccpb.KeyValue.value)
}

// int64 lease = 6;
inline void KeyValue::clear_lease() {
  _impl_.lease_ = ::int64_t{0};
}
inline ::int64_t KeyValue::lease() const {
  // @@protoc_insertion_point(field_get:mvccpb.KeyValue.lease)
  return _internal_lease();
}
inline void KeyValue::set_lease(::int64_t value) {
  _internal_set_lease(value);
  // @@protoc_insertion_point(field_set:mvccpb.KeyValue.lease)
}
inline ::int64_t KeyValue::_internal_lease() const {
  return _impl_.lease_;
}
inline void KeyValue::_internal_set_lease(::int64_t value) {
  ;
  _impl_.lease_ = value;
}

// -------------------------------------------------------------------

// Event

// .mvccpb.Event.EventType type = 1;
inline void Event::clear_type() {
  _impl_.type_ = 0;
}
inline ::mvccpb::Event_EventType Event::type() const {
  // @@protoc_insertion_point(field_get:mvccpb.Event.type)
  return _internal_type();
}
inline void Event::set_type(::mvccpb::Event_EventType value) {
   _internal_set_type(value);
  // @@protoc_insertion_point(field_set:mvccpb.Event.type)
}
inline ::mvccpb::Event_EventType Event::_internal_type() const {
  return static_cast<::mvccpb::Event_EventType>(_impl_.type_);
}
inline void Event::_internal_set_type(::mvccpb::Event_EventType value) {
  ;
  _impl_.type_ = value;
}

// .mvccpb.KeyValue kv = 2;
inline bool Event::has_kv() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.kv_ != nullptr);
  return value;
}
inline void Event::clear_kv() {
  if (_impl_.kv_ != nullptr) _impl_.kv_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::mvccpb::KeyValue& Event::_internal_kv() const {
  const ::mvccpb::KeyValue* p = _impl_.kv_;
  return p != nullptr ? *p : reinterpret_cast<const ::mvccpb::KeyValue&>(
      ::mvccpb::_KeyValue_default_instance_);
}
inline const ::mvccpb::KeyValue& Event::kv() const {
  // @@protoc_insertion_point(field_get:mvccpb.Event.kv)
  return _internal_kv();
}
inline void Event::unsafe_arena_set_allocated_kv(
    ::mvccpb::KeyValue* kv) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.kv_);
  }
  _impl_.kv_ = kv;
  if (kv) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mvccpb.Event.kv)
}
inline ::mvccpb::KeyValue* Event::release_kv() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mvccpb::KeyValue* temp = _impl_.kv_;
  _impl_.kv_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mvccpb::KeyValue* Event::unsafe_arena_release_kv() {
  // @@protoc_insertion_point(field_release:mvccpb.Event.kv)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mvccpb::KeyValue* temp = _impl_.kv_;
  _impl_.kv_ = nullptr;
  return temp;
}
inline ::mvccpb::KeyValue* Event::_internal_mutable_kv() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.kv_ == nullptr) {
    auto* p = CreateMaybeMessage<::mvccpb::KeyValue>(GetArenaForAllocation());
    _impl_.kv_ = p;
  }
  return _impl_.kv_;
}
inline ::mvccpb::KeyValue* Event::mutable_kv() {
  ::mvccpb::KeyValue* _msg = _internal_mutable_kv();
  // @@protoc_insertion_point(field_mutable:mvccpb.Event.kv)
  return _msg;
}
inline void Event::set_allocated_kv(::mvccpb::KeyValue* kv) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.kv_;
  }
  if (kv) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(kv);
    if (message_arena != submessage_arena) {
      kv = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, kv, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.kv_ = kv;
  // @@protoc_insertion_point(field_set_allocated:mvccpb.Event.kv)
}

// .mvccpb.KeyValue prev_kv = 3;
inline bool Event::has_prev_kv() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.prev_kv_ != nullptr);
  return value;
}
inline void Event::clear_prev_kv() {
  if (_impl_.prev_kv_ != nullptr) _impl_.prev_kv_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::mvccpb::KeyValue& Event::_internal_prev_kv() const {
  const ::mvccpb::KeyValue* p = _impl_.prev_kv_;
  return p != nullptr ? *p : reinterpret_cast<const ::mvccpb::KeyValue&>(
      ::mvccpb::_KeyValue_default_instance_);
}
inline const ::mvccpb::KeyValue& Event::prev_kv() const {
  // @@protoc_insertion_point(field_get:mvccpb.Event.prev_kv)
  return _internal_prev_kv();
}
inline void Event::unsafe_arena_set_allocated_prev_kv(
    ::mvccpb::KeyValue* prev_kv) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.prev_kv_);
  }
  _impl_.prev_kv_ = prev_kv;
  if (prev_kv) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mvccpb.Event.prev_kv)
}
inline ::mvccpb::KeyValue* Event::release_prev_kv() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::mvccpb::KeyValue* temp = _impl_.prev_kv_;
  _impl_.prev_kv_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mvccpb::KeyValue* Event::unsafe_arena_release_prev_kv() {
  // @@protoc_insertion_point(field_release:mvccpb.Event.prev_kv)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::mvccpb::KeyValue* temp = _impl_.prev_kv_;
  _impl_.prev_kv_ = nullptr;
  return temp;
}
inline ::mvccpb::KeyValue* Event::_internal_mutable_prev_kv() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.prev_kv_ == nullptr) {
    auto* p = CreateMaybeMessage<::mvccpb::KeyValue>(GetArenaForAllocation());
    _impl_.prev_kv_ = p;
  }
  return _impl_.prev_kv_;
}
inline ::mvccpb::KeyValue* Event::mutable_prev_kv() {
  ::mvccpb::KeyValue* _msg = _internal_mutable_prev_kv();
  // @@protoc_insertion_point(field_mutable:mvccpb.Event.prev_kv)
  return _msg;
}
inline void Event::set_allocated_prev_kv(::mvccpb::KeyValue* prev_kv) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.prev_kv_;
  }
  if (prev_kv) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(prev_kv);
    if (message_arena != submessage_arena) {
      prev_kv = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, prev_kv, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.prev_kv_ = prev_kv;
  // @@protoc_insertion_point(field_set_allocated:mvccpb.Event.prev_kv)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace mvccpb


PROTOBUF_NAMESPACE_OPEN

template <>
struct is_proto_enum<::mvccpb::Event_EventType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::mvccpb::Event_EventType>() {
  return ::mvccpb::Event_EventType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_kv_2eproto_2epb_2eh
